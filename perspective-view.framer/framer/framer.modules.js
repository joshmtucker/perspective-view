require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"perspective-view":[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
exports.Perspective = (function() {
  var activated, allLayers, animationCurve, device, screen;

  function Perspective() {}

  animationCurve = "spring(120, 20, 0, 0.07)";

  activated = false;

  screen = Framer.Device.screen;

  device = Framer.Device.phone;

  allLayers = null;

  Perspective.prototype.togglePerspective = function(verticalSeparation, temporalOpacity) {
    var i, j, layer, len, len1, ref, ref1, results, rotationNegative;
    if (verticalSeparation == null) {
      verticalSeparation = 40;
    }
    if (temporalOpacity == null) {
      temporalOpacity = 0.8;
    }
    allLayers = Framer.CurrentContext.getLayers();
    if (!activated && !this._childrenAnimating(screen.children)) {
      activated = true;
      screen.clip = false;
      this._setAllLayersAsChildrenOf(screen);
      device.originalProps = device.props;
      device.animate({
        properties: {
          rotationZ: 45,
          rotationX: 45,
          scaleY: 0.86062,
          y: verticalSeparation * (allLayers.length / 3.4)
        },
        curve: animationCurve
      });
      ref = screen.children;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        layer = ref[i];
        layer.originalProps = layer.props;
        results.push(layer.animate({
          properties: {
            z: verticalSeparation * (layer.index - 1),
            opacity: temporalOpacity
          },
          delay: (allLayers.length - layer.index) / allLayers.length,
          curve: animationCurve
        }));
      }
      return results;
    } else if (activated && !this._childrenAnimating(screen.children)) {
      activated = false;
      rotationNegative = device.rotationZ < 0;
      if (Math.abs(device.rotationZ) > 180) {
        device.originalProps.rotationZ = rotationNegative ? -360 : 360;
      } else {
        device.originalProps.rotationZ = rotationNegative ? -0 : 0;
      }
      device.animate({
        properties: device.originalProps,
        curve: animationCurve
      });
      ref1 = screen.children;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        layer = ref1[j];
        if (screen.children.indexOf(layer) !== 0) {
          layer.animate({
            properties: layer.originalProps,
            curve: animationCurve
          });
        }
      }
      return device.once(Events.AnimationEnd, function() {
        var k, len2, ref2, results1;
        screen.clip = true;
        ref2 = screen.children;
        results1 = [];
        for (k = 0, len2 = ref2.length; k < len2; k++) {
          layer = ref2[k];
          if (screen.children.indexOf(layer) !== 0) {
            results1.push(layer.parent = null);
          }
        }
        return results1;
      });
    }
  };

  Perspective.prototype._setAllLayersAsChildrenOf = function(parent) {
    var i, layer, len, results;
    results = [];
    for (i = 0, len = allLayers.length; i < len; i++) {
      layer = allLayers[i];
      if (layer.parent === null) {
        results.push(parent.addSubLayer(layer));
      }
    }
    return results;
  };

  Perspective.prototype._childrenAnimating = function(layersArray) {
    return _.some(layersArray, function(layer) {
      return layer.isAnimating;
    });
  };

  return Perspective;

})();

},{}],"perspective-view":[function(require,module,exports){
exports.Perspective = (function() {
  var activated, allLayers, animationCurve, device, screen;

  function Perspective() {}

  animationCurve = "spring(120, 20, 0, 0.07)";

  activated = false;

  screen = Framer.Device.screen;

  device = Framer.Device.phone;

  allLayers = null;

  Perspective.prototype.togglePerspective = function(verticalSeparation, temporalOpacity) {
    var i, j, layer, len, len1, ref, ref1, results, rotationNegative;
    if (verticalSeparation == null) {
      verticalSeparation = 40;
    }
    if (temporalOpacity == null) {
      temporalOpacity = 0.8;
    }
    allLayers = Framer.CurrentContext.getLayers();
    if (!activated && !this._childrenAnimating(screen.children)) {
      activated = true;
      screen.clip = false;
      this._setAllLayersAsChildrenOf(screen);
      device.originalProps = device.props;
      device.animate({
        properties: {
          rotationZ: 45,
          rotationX: 45,
          scaleY: 0.86062,
          y: verticalSeparation * (allLayers.length / 3.4)
        },
        curve: animationCurve
      });
      ref = screen.children;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        layer = ref[i];
        layer.originalProps = layer.props;
        results.push(layer.animate({
          properties: {
            z: verticalSeparation * (layer.index - 1),
            opacity: temporalOpacity
          },
          delay: (allLayers.length - layer.index) / allLayers.length,
          curve: animationCurve
        }));
      }
      return results;
    } else if (activated && !this._childrenAnimating(screen.children)) {
      activated = false;
      rotationNegative = device.rotationZ < 0;
      if (Math.abs(device.rotationZ) > 180) {
        device.originalProps.rotationZ = rotationNegative ? -360 : 360;
      } else {
        device.originalProps.rotationZ = rotationNegative ? -0 : 0;
      }
      device.animate({
        properties: device.originalProps,
        curve: animationCurve
      });
      ref1 = screen.children;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        layer = ref1[j];
        if (screen.children.indexOf(layer) !== 0) {
          layer.animate({
            properties: layer.originalProps,
            curve: animationCurve
          });
        }
      }
      return device.once(Events.AnimationEnd, function() {
        var k, len2, ref2, results1;
        screen.clip = true;
        ref2 = screen.children;
        results1 = [];
        for (k = 0, len2 = ref2.length; k < len2; k++) {
          layer = ref2[k];
          if (screen.children.indexOf(layer) !== 0) {
            results1.push(layer.parent = null);
          }
        }
        return results1;
      });
    }
  };

  Perspective.prototype._setAllLayersAsChildrenOf = function(parent) {
    var i, layer, len, results;
    results = [];
    for (i = 0, len = allLayers.length; i < len; i++) {
      layer = allLayers[i];
      if (layer.parent === null) {
        results.push(parent.addSubLayer(layer));
      }
    }
    return results;
  };

  Perspective.prototype._childrenAnimating = function(layersArray) {
    return _.some(layersArray, function(layer) {
      return layer.isAnimating;
    });
  };

  return Perspective;

})();


},{}]},{},[])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
