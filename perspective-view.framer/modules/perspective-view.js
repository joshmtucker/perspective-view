// Generated by CoffeeScript 1.9.1
exports.PerspectiveView = (function() {
  var activated, allLayers, animationCurve, initialRotation, rotateObject;

  function PerspectiveView() {}

  animationCurve = "spring(120, 20, 0, 0.07)";

  activated = false;

  rotateObject = null;

  initialRotation = 0;

  allLayers = null;

  PerspectiveView.prototype.togglePerspective = function(verticalSeparation, temporalOpacity) {
    var i, j, layer, len, len1, ref, ref1, results, rotationNegative;
    if (verticalSeparation == null) {
      verticalSeparation = 40;
    }
    if (temporalOpacity == null) {
      temporalOpacity = 0.8;
    }
    allLayers = Framer.CurrentContext.getLayers();
    rotateObject = Framer.Device.deviceType !== "fullscreen" ? Framer.Device.phone : Framer.Device.screen;
    this._eventsOn();
    if (!activated && !this._childrenAnimating(Framer.Device.screen.children)) {
      activated = true;
      Framer.Device.screen.clip = false;
      this._setAllLayersAsChildrenOf(Framer.Device.screen);
      rotateObject.originalProps = rotateObject.props;
      rotateObject.animate({
        properties: {
          rotationZ: 45,
          rotationX: 45,
          scaleY: 0.86062,
          y: verticalSeparation * (allLayers.length / 3.4)
        },
        curve: animationCurve
      });
      ref = Framer.Device.screen.children;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        layer = ref[i];
        layer.originalProps = layer.props;
        results.push(layer.animate({
          properties: {
            z: verticalSeparation * (layer.index - 1),
            opacity: temporalOpacity
          },
          delay: (allLayers.length - layer.index) / allLayers.length,
          curve: animationCurve
        }));
      }
      return results;
    } else if (activated && !this._childrenAnimating(Framer.Device.screen.children)) {
      activated = false;
      this._eventsOff();
      rotationNegative = rotateObject.rotationZ < 0;
      if (Math.abs(rotateObject.rotationZ) > 180) {
        rotateObject.originalProps.rotationZ = rotationNegative ? -360 : 360;
      } else {
        rotateObject.originalProps.rotationZ = rotationNegative ? -0 : 0;
      }
      rotateObject.animate({
        properties: {
          rotationZ: rotateObject.originalProps.rotationZ,
          rotationX: rotateObject.originalProps.rotationX,
          scaleY: rotateObject.originalProps.scaleY,
          y: rotateObject.originalProps.y
        },
        curve: animationCurve
      });
      ref1 = Framer.Device.screen.children;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        layer = ref1[j];
        if (Framer.Device.screen.children.indexOf(layer) !== 0) {
          layer.animate({
            properties: layer.originalProps,
            curve: animationCurve
          });
        }
      }
      return rotateObject.once(Events.AnimationEnd, function() {
        var k, len2, ref2, results1;
        Framer.Device.screen.clip = true;
        rotateObject.rotationZ = 0;
        ref2 = Framer.Device.screen.children;
        results1 = [];
        for (k = 0, len2 = ref2.length; k < len2; k++) {
          layer = ref2[k];
          if (Framer.Device.screen.children.indexOf(layer) !== 0) {
            results1.push(layer.parent = null);
          }
        }
        return results1;
      });
    }
  };

  PerspectiveView.prototype._setAllLayersAsChildrenOf = function(parent) {
    var i, layer, len, results;
    results = [];
    for (i = 0, len = allLayers.length; i < len; i++) {
      layer = allLayers[i];
      if (layer.parent === null) {
        results.push(parent.addSubLayer(layer));
      }
    }
    return results;
  };

  PerspectiveView.prototype._childrenAnimating = function(layersArray) {
    return _.some(layersArray, function(layer) {
      return layer.isAnimating;
    });
  };


  /* EVENTS */

  PerspectiveView.prototype._panStart = function() {
    return initialRotation = rotateObject.rotationZ;
  };

  PerspectiveView.prototype._pan = function(e) {
    return rotateObject.rotationZ = initialRotation - ((event.touchCenterX - event.startX) / 4);
  };

  PerspectiveView.prototype._panEnd = function() {
    return rotateObject.rotationZ = rotateObject.rotationZ % 360;
  };

  PerspectiveView.prototype._eventsOn = function() {
    if (rotateObject === Framer.Device.screen) {
      rotateObject.animate({
        properties: {
          backgroundColor: "rgba(128, 128, 128, 0.2)"
        }
      });
    }
    rotateObject.on(Events.PanStart, this._panStart);
    rotateObject.on(Events.Pan, this._pan);
    return rotateObject.on(Events.PanEnd, this._panEnd);
  };

  PerspectiveView.prototype._eventsOff = function() {
    if (rotateObject === Framer.Device.screen) {
      rotateObject.animate({
        properties: {
          backgroundColor: "transparent"
        }
      });
    }
    rotateObject.off(Events.PanStart, this._panStart);
    rotateObject.off(Events.Pan, this._pan);
    return rotateObject.off(Events.PanEnd, this._panEnd);
  };

  return PerspectiveView;

})();
